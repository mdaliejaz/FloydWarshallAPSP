//loop based Floyd Warshall FW.cpp
///////////////////////////////////////////Start//////////////////////////////////////////////////////////////
#include<stdio.h>
#include<iostream>
#include<limits.h>
#include<algorithm>
#include<cilk.h>
#include<cilkview.h>
using namespace std;

/* maxVertices represents maximum number of vertices that can be present in the graph. */
#ifndef maxVertices
#define maxVertices   8192
#endif
#define INF           INT_MAX-1

/* Input Format: Graph is directed and weighted. First two integers must be number of vertices and edges 
 *    which must be followed by pairs of vertices which has an edge between them. 
 *     */

int dist[maxVertices][maxVertices];
int vertices;
int m;

void init(int n)
{
	cilk_for(int i=0;i<n;i++)
	{
		cilk_for(int j=0;j<n;j++)
		{
			if(i==j)
			{
				dist[i][j] = 0;
			}
			else
			{
				dist[i][j] = INF;
			}
		}
	}
}

void FloydWarshall(int vertices)
{        
	for(int via=0;via<vertices;via++)
	{
		cilk_for(int from=0;from<vertices;from++)
		{
			cilk_for(int to=0;to<vertices;to++)
			{
				if(from!=to && from!=via && to!=via)
				{
					dist[from][to] = min(dist[from][to],dist[from][via]+dist[via][to]);
				}

			}
		}
	}
}

int edges;

int cilk_main(int argc, char *argv[])
{      
	vertices=atoi(argv[1]);
	m = atoi(argv[2]);
	/*initialize dist between all pairs as infinity*/
	init(vertices);
	/* vertices represent number of vertices and edges represent number of edges in the graph. */
	for(int i = 0 ; i < vertices ; i++ )
        {
                for(int j = 0 ; j< vertices; j++ )
                {
                        if( i == j )
                                dist[i][j] = 0;
                        else {
                                dist[i][j] = ((i+j)%5)?(i+j):(i+j)%7;
                        }
                }
        }

	cilk::cilkview cv;
        cv.start();
	FloydWarshall(vertices);
	cv.stop();
        cv.dump("FW_iter_p", false);
	cout << endl << cv.accumulated_milliseconds() << " milliseconds" << endl;
	/*for(int i = 0 ; i < vertices; i++ ) 
	{
		cout << "\n";
		for(int j = 0 ; j< vertices ;j++ )
			cout << dist[i][j] << " " ;
	}
*/
	return 0;
}
////////////////////////////////////End//////////////////////////////////

